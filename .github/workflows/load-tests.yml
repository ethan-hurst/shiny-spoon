name: Load Testing

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of load test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - load
          - stress
          - spike
          - soak
      
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  
  pull_request:
    paths:
      - 'app/api/**'
      - 'lib/**'
      - 'k6/**'

env:
  K6_VERSION: '0.47.0'

jobs:
  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run Smoke Test
        run: |
          k6 run k6/tests/smoke-test.js \
            --out json=results/smoke-test.json \
            --summary-export=results/smoke-summary.json
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}
      
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: results/
      
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('results/smoke-summary.json', 'utf8'));
            
            const p95 = summary.metrics.http_req_duration.values['p(95)'];
            const errorRate = summary.metrics.http_req_failed.values.rate;
            
            const comment = `## 🔥 Load Test Results
            
            **Smoke Test Summary:**
            - ⏱️ P95 Response Time: ${p95.toFixed(2)}ms
            - ❌ Error Rate: ${(errorRate * 100).toFixed(2)}%
            - ✅ Total Requests: ${summary.metrics.http_reqs.values.count}
            
            ${errorRate > 0.1 ? '⚠️ **Warning:** Error rate exceeds 10% threshold!' : '✅ All tests passed!'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  scheduled-tests:
    name: Scheduled Load Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        test: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.test_type)) || fromJSON('["load", "stress"]') }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup k6
        run: |
          wget https://github.com/grafana/k6/releases/download/v${K6_VERSION}/k6-v${K6_VERSION}-linux-amd64.tar.gz
          tar -xzf k6-v${K6_VERSION}-linux-amd64.tar.gz
          sudo mv k6-v${K6_VERSION}-linux-amd64/k6 /usr/local/bin/
          k6 version
      
      - name: Prepare Test Data
        run: |
          mkdir -p results
          echo "Test: ${{ matrix.test }}" > results/test-info.txt
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> results/test-info.txt
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> results/test-info.txt
      
      - name: Run ${{ matrix.test }} Test
        run: |
          k6 run k6/tests/${{ matrix.test }}-test.js \
            --out json=results/${{ matrix.test }}-test.json \
            --out cloud \
            --summary-export=results/${{ matrix.test }}-summary.json
        env:
          BASE_URL: ${{ github.event.inputs.environment == 'production' && secrets.PRODUCTION_URL || secrets.STAGING_URL }}
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          K6_CLOUD_PROJECT_ID: ${{ secrets.K6_CLOUD_PROJECT_ID }}
      
      - name: Generate HTML Report
        run: |
          node scripts/generate-load-test-report.js \
            results/${{ matrix.test }}-summary.json \
            results/${{ matrix.test }}-report.html
      
      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.test }}-test-results-${{ github.run_id }}
          path: results/
      
      - name: Check Performance Regression
        id: regression-check
        run: |
          node scripts/check-performance-regression.js \
            results/${{ matrix.test }}-summary.json \
            k6/benchmarks/baseline.json
        continue-on-error: true
      
      - name: Update Baseline (if main branch)
        if: github.ref == 'refs/heads/main' && steps.regression-check.outcome == 'success'
        run: |
          node scripts/update-baseline.js \
            results/${{ matrix.test }}-summary.json \
            k6/benchmarks/baseline.json
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k6/benchmarks/baseline.json
          git commit -m "chore: Update performance baseline from ${{ matrix.test }} test"
          git push

  performance-dashboard:
    name: Update Performance Dashboard
    runs-on: ubuntu-latest
    needs: [scheduled-tests]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-results/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Aggregate Results
        run: |
          node scripts/aggregate-test-results.js all-results/ dashboard-data.json
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p gh-pages
          cp dashboard-data.json gh-pages/
          cp -r k6/dashboard/* gh-pages/
          
          cd gh-pages
          git init
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Update performance dashboard"
          git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:gh-pages

  alert-on-failure:
    name: Alert on Performance Issues
    runs-on: ubuntu-latest
    needs: [scheduled-tests]
    if: failure()
    
    steps:
      - name: Send Slack Alert
        uses: slackapi/slack-github-action@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: |
            {
              "text": "🚨 Load Test Failed!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Load Test Failed*\n*Repository:* ${{ github.repository }}\n*Test Type:* ${{ github.event.inputs.test_type || 'Scheduled' }}\n*Environment:* ${{ github.event.inputs.environment || 'staging' }}\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }