// This file is auto-generated by Supabase CLI
// Run: npx supabase gen types typescript --local > types/database.types.ts
// Or for cloud: npx supabase gen types typescript --project-id YOUR_PROJECT_ID > types/database.types.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      organizations: {
        Row: {
          id: string
          name: string
          slug: string
          subscription_tier: 'starter' | 'professional' | 'enterprise'
          subscription_status: 'active' | 'trialing' | 'past_due' | 'canceled'
          settings: Json
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          name: string
          slug: string
          subscription_tier?: 'starter' | 'professional' | 'enterprise'
          subscription_status?: 'active' | 'trialing' | 'past_due' | 'canceled'
          settings?: Json
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          name?: string
          slug?: string
          subscription_tier?: 'starter' | 'professional' | 'enterprise'
          subscription_status?: 'active' | 'trialing' | 'past_due' | 'canceled'
          settings?: Json
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }
      user_profiles: {
        Row: {
          id: string
          user_id: string
          organization_id: string
          full_name: string | null
          role: 'owner' | 'admin' | 'member'
          permissions: Json
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          user_id: string
          organization_id: string
          full_name?: string | null
          role?: 'owner' | 'admin' | 'member'
          permissions?: Json
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          organization_id?: string
          full_name?: string | null
          role?: 'owner' | 'admin' | 'member'
          permissions?: Json
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: 'user_profiles_organization_id_fkey'
            columns: ['organization_id']
            isOneToOne: false
            referencedRelation: 'organizations'
            referencedColumns: ['id']
          },
          {
            foreignKeyName: 'user_profiles_user_id_fkey'
            columns: ['user_id']
            isOneToOne: true
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
        ]
      }
      products: {
        Row: {
          id: string
          organization_id: string
          sku: string
          name: string
          description: string | null
          category: string | null
          base_price: number
          cost: number
          weight: number | null
          dimensions: Json
          image_url: string | null
          active: boolean
          metadata: Json
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          organization_id: string
          sku: string
          name: string
          description?: string | null
          category?: string | null
          base_price?: number
          cost?: number
          weight?: number | null
          dimensions?: Json
          image_url?: string | null
          active?: boolean
          metadata?: Json
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          organization_id?: string
          sku?: string
          name?: string
          description?: string | null
          category?: string | null
          base_price?: number
          cost?: number
          weight?: number | null
          dimensions?: Json
          image_url?: string | null
          active?: boolean
          metadata?: Json
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: 'products_organization_id_fkey'
            columns: ['organization_id']
            isOneToOne: false
            referencedRelation: 'organizations'
            referencedColumns: ['id']
          },
        ]
      }
      warehouses: {
        Row: {
          id: string
          organization_id: string
          name: string
          code: string
          address: Json
          contact: Json
          is_default: boolean
          active: boolean
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          organization_id: string
          name: string
          code: string
          address?: Json
          contact?: Json
          is_default?: boolean
          active?: boolean
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          organization_id?: string
          name?: string
          code?: string
          address?: Json
          contact?: Json
          is_default?: boolean
          active?: boolean
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: 'warehouses_organization_id_fkey'
            columns: ['organization_id']
            isOneToOne: false
            referencedRelation: 'organizations'
            referencedColumns: ['id']
          },
        ]
      }
      inventory: {
        Row: {
          id: string
          organization_id: string
          product_id: string
          warehouse_id: string
          quantity: number
          reserved_quantity: number
          reorder_point: number | null
          reorder_quantity: number | null
          last_counted_at: string | null
          last_counted_by: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          organization_id: string
          product_id: string
          warehouse_id: string
          quantity?: number
          reserved_quantity?: number
          reorder_point?: number | null
          reorder_quantity?: number | null
          last_counted_at?: string | null
          last_counted_by?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          organization_id?: string
          product_id?: string
          warehouse_id?: string
          quantity?: number
          reserved_quantity?: number
          reorder_point?: number | null
          reorder_quantity?: number | null
          last_counted_at?: string | null
          last_counted_by?: string | null
          created_at?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: 'inventory_last_counted_by_fkey'
            columns: ['last_counted_by']
            isOneToOne: false
            referencedRelation: 'users'
            referencedColumns: ['id']
          },
          {
            foreignKeyName: 'inventory_organization_id_fkey'
            columns: ['organization_id']
            isOneToOne: false
            referencedRelation: 'organizations'
            referencedColumns: ['id']
          },
          {
            foreignKeyName: 'inventory_product_id_fkey'
            columns: ['product_id']
            isOneToOne: false
            referencedRelation: 'products'
            referencedColumns: ['id']
          },
          {
            foreignKeyName: 'inventory_warehouse_id_fkey'
            columns: ['warehouse_id']
            isOneToOne: false
            referencedRelation: 'warehouses'
            referencedColumns: ['id']
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      get_user_organization_id: {
        Args: {
          user_uuid: string
        }
        Returns: string
      }
      is_org_admin: {
        Args: {
          user_uuid: string
          org_uuid: string
        }
        Returns: boolean
      }
      is_org_member: {
        Args: {
          user_uuid: string
          org_uuid: string
        }
        Returns: boolean
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
